  1:/*
  2: AIFrame.java
  3:
  4:*/
  5:
  6:import java.util.*;
  7:
  8:abstract
  9:class AIFrame {
 10: 
 11:private boolean mIsInstance;
 12:private String mName;
 13:private Dictionary mSlots = new Hashtable();
 14:private AIWhenConstructedProc mWhenConstructedProc = null;
 15:
 16:/*
 17: * AIFrame
 18: *  コンストラクタ
 19: */
 20:AIFrame( AIFrameSystem inFrameSystem,
 21: AIClassFrame inSuperFrame,
 22: String inName,
 23: boolean inIsInstance )
 24:{
 25: mName = inName;
 26: mIsInstance = inIsInstance;
 27: if ( inSuperFrame != null )
 28:  setSlotValue( getSuperSlotName(), inSuperFrame );
 29: evalWhenConstructedProc( inFrameSystem, this );
 30:}
 31:
 32:
 33:/*
 34: * AIFrame
 35: *  コンストラクタ
 36: */
 37:AIFrame( AIFrameSystem inFrameSystem,
 38: Enumeration inSuperFrames,
 39: String inName,
 40: boolean inIsInstance )
 41:{
 42: mName = inName;
 43: mIsInstance = inIsInstance;
 44: while ( inSuperFrames.hasMoreElements() == true ) {
 45:  AIFrame frame = (AIFrame) inSuperFrames.nextElement();
 46:  addSlotValue( getSuperSlotName(), frame );
 47: }
 48: evalWhenConstructedProc( inFrameSystem, this );
 49:}
 50:
 51:
 52:/*
 53: * setWhenConstructedProc
 54: *  when-constructed proc を登録
 55: */
 56:public
 57:void setWhenConstructedProc( AIWhenConstructedProc inProc ) {
 58: mWhenConstructedProc = inProc;
 59:}
 60:
 61:
 62:/*
 63: * getWhenConstructedProc
 64: *  when-constructed proc を返す
 65: */
 66:public
 67:AIWhenConstructedProc getWhenConstructedProc() {
 68: return mWhenConstructedProc;
 69:}
 70:
 71:
 72:/*
 73: * evalWhenConstructedProc
 74: *  when-constructed proc を評価
 75: */
 76:void evalWhenConstructedProc(
 77: AIFrameSystem inFrameSystem,
 78: AIFrame inFrame )
 79:{
 80: Enumeration supers = getSupers();
 81: if ( supers != null ) {
 82:  while ( supers.hasMoreElements() == true ) {
 83:   AIClassFrame frame = (AIClassFrame) supers.nextElement();
 84:   frame.evalWhenConstructedProc( inFrameSystem, inFrame );
 85:  }
 86: }
 87: if ( mWhenConstructedProc != null )
 88:  mWhenConstructedProc.eval( inFrameSystem, inFrame );
 89:}
 90:
 91:
 92:/*
 93: * isInstance
 94: *  このフレームがインスタンスフレームなら true を返す
 95: */
 96:public boolean isInstance() { return mIsInstance; }
 97:
 98:
 99:/*
100: * getSupers
101: *  このフレームのスーパーフレームを返す
102: */
103:public
104:Enumeration getSupers() {
105: return getSlotValues( getSuperSlotName() );
106:}
107:
108:
109:/**
110: * readSlotValue
111: *  スロット inSlotName に格納されているスロット値を返す．
112: *  複数のスロット値が格納されているときは，最初のオブジェクトを返す．
113: *
114: *  スロット値の優先度
115: *   1. 自分の when-requested procedure
116: *   2. スーパークラスの when-requested procedure
117: *   3. 自分の when-read procedure
118: *   4. スーパークラスの when-read procedure
119: *   5. 自分のスロット値
120: *   6. スーパークラスのスロット値
121: */
122:public
123:Object
124:readSlotValue(
125: AIFrameSystem inFrameSystem,
126: String inSlotName,
127: boolean inDefault )
128:{
129: return getFirst(
130:         readSlotValues( inFrameSystem, inSlotName, inDefault ) );
131:}
132:
133:
134:/**
135: * readSlotValues
136: *  スロット inSlotName に格納されているスロット値を返す．
137: */
138:public
139:Enumeration
140:readSlotValues(
141: AIFrameSystem inFrameSystem,
142: String inSlotName,
143: boolean inDefault )
144:{
145: Enumeration obj = null;
146: 
147: if ( inDefault == false ) {
148:  AISlot slot = getSlot( inSlotName );
149:  if ( slot != null )
150:   obj = slot.getSlotValues();
151: }
152:  
153: if ( obj == null )
154:  obj = readSlotValuesWithWhenRequestedProc(
155:         inFrameSystem, inSlotName );
156:
157: if ( obj == null ) {
158:  Enumeration supers = getSupers();
159:  while ( supers.hasMoreElements() == true ) {
160:   AIClassFrame frame = (AIClassFrame) supers.nextElement();
161:   obj = frame.getSlotValues( inSlotName );
162:   if ( obj != null )
163:    break;
164:  }
165: }
166:
167: return readSlotValuesWithWhenReadProc(
168:         inFrameSystem, inSlotName, obj );
169:}
170:
171:
172:/**
173: * readSlotValuesWithWhenRequestedProc
174: *  スロット inSlotName に格納されているスロット値を返す．
175: */
176:Enumeration
177:readSlotValuesWithWhenRequestedProc(
178: AIFrameSystem inFrameSystem,
179: String inSlotName )
180:{
181: return readSlotValuesWithWhenRequestedProc(
182:         inFrameSystem, this, inSlotName );
183:}
184:
185:protected
186:Enumeration
187:readSlotValuesWithWhenRequestedProc(
188: AIFrameSystem inFrameSystem,
189: AIFrame inFrame,
190: String inSlotName )
191:{
192: Enumeration obj = null;
193: AISlot slot = getSlot( inSlotName );
194:  
195:  obj = evalWhenRequestedProc(
196:         inFrameSystem, inFrame, slot, inSlotName );
197: if ( obj != null )
198:  return obj;
199:
200: Enumeration supers = getSupers();
201: if ( supers != null ) {
202:  while ( supers.hasMoreElements() == true ) {
203:   AIClassFrame frame = (AIClassFrame) supers.nextElement();
204:   slot = frame.getSlot( inSlotName );
205:   obj = frame.evalWhenRequestedProc(
206:          inFrameSystem, inFrame, slot, inSlotName );
207:   if ( obj != null )
208:    return obj;
209:  }
210: }
211: 
212: return null;
213:}
214:
215:protected
216:Enumeration
217:evalWhenRequestedProc(
218: AIFrameSystem inFrameSystem,
219: AIFrame inFrame,
220: AISlot inSlot,
221: String inSlotName )
222:{
223:  if ( inSlot != null && inSlot.getWhenRequestedProc() != null ) {
224:  AIDemonProc demon = inSlot.getWhenRequestedProc();
225:  if ( demon != null )
226:   return (Enumeration) demon.eval(
227:           inFrameSystem, inFrame, inSlotName, null );
228:  }
229: return null;
230:}
231:
232:
233:/**
234: * readSlotValuesWithWhenReadProc
235: *  スロット inSlotName に格納されているスロット値を返す．
236: */
237:Enumeration
238:readSlotValuesWithWhenReadProc(
239: AIFrameSystem inFrameSystem,
240: String inSlotName,
241: Enumeration inSlotValue )
242:{
243: return readSlotValuesWithWhenReadProc(
244:         inFrameSystem, this, inSlotName, inSlotValue );
245:}
246:
247:protected
248:Enumeration
249:readSlotValuesWithWhenReadProc(
250: AIFrameSystem inFrameSystem,
251: AIFrame inFrame,
252: String inSlotName,
253: Enumeration inSlotValue )
254:{
255: AISlot slot;
256:  
257: Enumeration supers = getSupers();
258: if ( supers != null ) {
259:  while ( supers.hasMoreElements() == true ) {
260:   AIClassFrame frame = (AIClassFrame) supers.nextElement();
261:   slot = frame.getSlot( inSlotName );
262:   inSlotValue =
263:    frame.evalWhenReadProc(
264:     inFrameSystem, inFrame, slot, inSlotName, inSlotValue );
265:  }
266: }
267:
268: slot = getSlot( inSlotName );
269:  return evalWhenReadProc( inFrameSystem, inFrame,
270:          slot, inSlotName, inSlotValue );
271:}
272:
273:protected
274:Enumeration
275:evalWhenReadProc(
276: AIFrameSystem inFrameSystem,
277: AIFrame inFrame,
278: AISlot inSlot,
279: String inSlotName,
280: Enumeration inSlotValue )
281:{
282:  if ( inSlot != null && inSlot.getWhenReadProc() != null ) {
283:  AIDemonProc demon = inSlot.getWhenReadProc();
284:  if ( demon != null )
285:   inSlotValue =
286:    (Enumeration) demon.eval( inFrameSystem, inFrame,
287:                   inSlotName, inSlotValue );
288:  }
289: 
290: return inSlotValue; 
291:}
292:
293:/**
294: * writeSlotValue
295: *  スロット inSlotName にスロット値 inSlotValue を設定する．
296: */
297:public
298:void
299:writeSlotValue(
300: AIFrameSystem inFrameSystem,
301: String inSlotName,
302: Object inSlotValue )
303:{
304: AISlot slot = getSlot( inSlotName );
305: if ( slot == null ) {
306:  slot = new AISlot();
307:  mSlots.put( inSlotName, slot );
308: }
309:
310: slot.setSlotValue( inSlotValue );
311:
312: writeSlotValueWithWhenWrittenProc(
313:  inFrameSystem, inSlotName, inSlotValue );
314:}
315:
316:
317:void writeSlotValueWithWhenWrittenProc(
318: AIFrameSystem inFrameSystem,
319: String inSlotName,
320: Object inSlotValue )
321:{
322: Enumeration supers = getSupers();
323: if ( supers != null ) {
324:  while ( supers.hasMoreElements() == true ) {
325:   AIClassFrame frame = (AIClassFrame) supers.nextElement();
326:   frame.writeSlotValueWithWhenWrittenProc(
327:    inFrameSystem, inSlotName, inSlotValue );
328:  }
329: }
330:
331: AISlot slot = getSlot( inSlotName );
332: if ( slot != null ) {
333:  AIDemonProc demon = slot.getWhenWrittenProc();
334:  if ( demon != null )
335:   demon.eval( inFrameSystem, this,
336:    inSlotName, makeEnum( inSlotValue ) );  
337: }
338:}
339:
340:
341:// ----------------------------------------------------------------------
342:public
343:Object getSlotValue( String inSlotName ) {
344: Enumeration iter = getSlotValues( inSlotName );
345: if ( iter != null && iter.hasMoreElements() == true )
346:  return iter.nextElement();
347: return null;
348:}
349:
350:public
351:Enumeration getSlotValues( String inSlotName ) {
352: AISlot slot = getSlot( inSlotName );
353: if ( slot == null )
354:  return null;
355: return slot.getSlotValues();
356:}
357:
358:public
359:void setSlotValue( String inSlotName, Object inSlotValue ) {
360: AISlot slot = getSlot( inSlotName );
361: if ( slot == null ) {
362:  slot = new AISlot();
363:  mSlots.put( inSlotName, slot );
364: }
365: slot.setSlotValue( inSlotValue );
366:}
367:
368:public
369:void addSlotValue( String inSlotName, Object inSlotValue ) {
370: AISlot slot = getSlot( inSlotName );
371: if ( slot == null ) {
372:  slot = new AISlot();
373:  mSlots.put( inSlotName, slot );
374: }
375: slot.addSlotValue( inSlotValue );
376:}
377:
378:public
379:void removeSlotValue( String inSlotName, Object inSlotValue ) {
380: AISlot slot = getSlot( inSlotName );
381: if ( slot != null )
382:  slot.removeSlotValue( inSlotValue );
383:}
384:
385:public
386:void setDemonProc(
387: int inType,
388: String inSlotName,
389: AIDemonProc inDemonProc )
390:{
391: AISlot slot = getSlot( inSlotName );
392: if ( slot == null ) {
393:  slot = new AISlot();
394:  mSlots.put( inSlotName, slot );
395: }
396: slot.setDemonProc( inType, inDemonProc );
397:}
398:
399:
400:// ------------------------------------------------------------------
401:// utils
402:// ------------------------------------------------------------------
403:
404:/*
405: * getSuperSlotName
406: *  スーパーフレームを格納しているスロットの名前を返す．
407: */
408:String getSuperSlotName() {
409: if ( isInstance() == true )
410:  return "is-a";
411: return "ako";
412:}
413:
414:/*
415: * getSlot
416: *  スロット名が inSlotName であるスロットを返す．
417: */
418:AISlot getSlot( String inSlotName ) {
419: return (AISlot) mSlots.get( inSlotName );
420:}
421:
422:
423:/*
424: * getFirst
425: *  inEnum 中の最初のオブジェクトを返す
426: */
427:public static
428:Object getFirst( Enumeration inEnum ) {
429: if ( inEnum != null && inEnum.hasMoreElements() == true )
430:  return inEnum.nextElement();
431: return null;
432:}
433:
434:
435:/*
436: * makeEnum
437: *
438: */
439:public static
440:Enumeration makeEnum( Object inObj ) {
441: Vector vec = new Vector();
442: vec.addElement( inObj );
443: return vec.elements();
444:}
445:
446:} // end of class definition